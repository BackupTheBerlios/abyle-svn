import xml.dom.minidom
import re
from xml.dom.minidom import Node
from abyle_output import abyle_output

class abyleparse:
        def __init__(self, fwconfigpath, interface, rulesfile, ipt_xmlconfig):
                self.fwconfigpath = fwconfigpath
		self.pinterface = interface
		self.rulesfile = rulesfile
		self.iptflagsfile = ipt_xmlconfig
		self.rulesarray = []
		self.iptflags_dict = {}
 
		try:
			self.iptflags_config = xml.dom.minidom.parse(self.fwconfigpath+self.iptflagsfile)
			if self.pinterface == "default":
				self.rules_config = xml.dom.minidom.parse(self.fwconfigpath+self.rulesfile)
			else:
                		self.rules_config = xml.dom.minidom.parse(self.fwconfigpath+self.pinterface+'/'+self.rulesfile)
		except IOError, msg:
			abyle_output(self.interface+"_xmlparsing", "", "", str(msg))

	def getIpTablesFlags(self):
		for self.iptflag in self.iptflags_config.getElementsByTagName("flag"):
			self.iptflags_dict[self.iptflag.firstChild.nodeValue] = self.iptflag.getAttribute("cli_arg")
		return self.iptflags_dict

	def flagCheck(self,flagvalue,flagname):
		self.flagvalue = flagvalue
		self.flagname = flagname

		if not self.flagvalue:
			self.flagstr = ''
		else:
			self.flagstr = self.flagname+' '+self.flagvalue+' '	
			
		return self.flagstr

	#def getConfig(self):

	def getRules(self):

		self.rulesarray = []

		self.iptflags_dict = self.getIpTablesFlags()
		self.interfacestr = self.iptflags_dict["interface_iptflag"]+' '+self.pinterface+' '


                for self.interface in self.rules_config.getElementsByTagName("interface"):

                        self.rules_level = self.interface.getElementsByTagName("rules")

                        for self.rules in self.rules_level:

                                self.traffic_level = self.rules.getElementsByTagName("traffic")

                                for self.traffic in self.traffic_level:
					self.chainstr = self.flagCheck(self.traffic.getAttribute("chain"),self.iptflags_dict["chain_iptflag"])
					self.jobstr = self.flagCheck(self.traffic.getAttribute("job"),self.iptflags_dict["job_iptflag"])
					self.statestr = self.flagCheck(self.traffic.getAttribute("state"),self.iptflags_dict["state_iptflag"])
					self.sourcestr = self.flagCheck(self.traffic.getAttribute("source"),self.iptflags_dict["source_iptflag"])
					self.protocolstr = self.flagCheck(self.traffic.getAttribute("protocol"),self.iptflags_dict["protocol_iptflag"])
					self.destinationstr = self.flagCheck(self.traffic.getAttribute("destination"),self.iptflags_dict["destination_iptflag"])
					self.dportstr = self.flagCheck(self.traffic.getAttribute("destination-port"),self.iptflags_dict["destination-port_iptflag"])
				
					self.iptstr = self.interfacestr+ \
						self.chainstr+ \
						self.jobstr+ \
						self.statestr+ \
						self.protocolstr+ \
						self.sourcestr+ \
						self.destinationstr+ \
						self.dportstr

					self.rulesarray.append(self.iptstr)

		return	self.rulesarray

	def getPortforwarding(self):

		self.rulesarray = []

		self.iptflags_dict = self.getIpTablesFlags()

		self.interfacestr = self.iptflags_dict["interface_iptflag"]+' '+self.pinterface+' '

                for self.interface in self.rules_config.getElementsByTagName("interface"):

                        self.portforwarding_level = self.interface.getElementsByTagName("portforwarding")

                        for self.portforwarding in self.portforwarding_level:

                                self.traffic_level = self.portforwarding.getElementsByTagName("traffic")

                                for self.traffic in self.traffic_level:

					self.chainstr = self.flagCheck(self.traffic.getAttribute("chain"),self.iptflags_dict["chain_iptflag"])
					self.jobstr = self.flagCheck(self.traffic.getAttribute("job"),self.iptflags_dict["job_iptflag"])
					self.statestr = self.flagCheck(self.traffic.getAttribute("state"),self.iptflags_dict["state_iptflag"])
					self.sourcestr = self.flagCheck(self.traffic.getAttribute("source"),self.iptflags_dict["source_iptflag"])
					self.protocolstr = self.flagCheck(self.traffic.getAttribute("protocol"),self.iptflags_dict["protocol_iptflag"])

					self.destinationstr = self.flagCheck(self.traffic.getAttribute("destination"),self.iptflags_dict["todest_iptflag"])
					self.dportstr = self.flagCheck(self.traffic.getAttribute("destination-port"),"")

					self.tablestr = self.flagCheck(self.traffic.getAttribute("table"),self.iptflags_dict["table_iptflag"])
					self.forwardportstr = self.flagCheck(self.traffic.getAttribute("forward-port"),self.iptflags_dict["destination-port_iptflag"])


					self.destinationstr = re.sub("^[^\w]+","",self.destinationstr)
                                        self.destinationstr = re.sub("[^\w]+$","",self.destinationstr)
                                        self.destinationstr = '--'+self.destinationstr
	                                self.dportstr = re.sub("[^\w]+$","",self.dportstr)
	                                self.dportstr = re.sub("^[^\w]+","",self.dportstr)


					self.iptstr = self.tablestr+ \
						self.chainstr+ \
						self.protocolstr+ \
						self.forwardportstr+ \
						self.interfacestr+ \
						self.jobstr+ \
						self.destinationstr+':'+self.dportstr
					self.rulesarray.append(self.iptstr)

		return	self.rulesarray




	def getTproxy(self):

		self.rulesarray = []

		self.iptflags_dict = self.getIpTablesFlags()

		self.interfacestr = self.iptflags_dict["interface_iptflag"]+' '+self.pinterface+' '

                for self.interface in self.rules_config.getElementsByTagName("interface"):

                        self.tproxy_level = self.interface.getElementsByTagName("transproxy")

                        for self.tproxy in self.tproxy_level:

                                self.traffic_level = self.tproxy.getElementsByTagName("traffic")

                                for self.traffic in self.traffic_level:

					self.chainstr = self.flagCheck(self.traffic.getAttribute("chain"),self.iptflags_dict["chain_iptflag"])
					self.jobstr = self.flagCheck(self.traffic.getAttribute("job"),self.iptflags_dict["job_iptflag"])
					self.protocolstr = self.flagCheck(self.traffic.getAttribute("protocol"),self.iptflags_dict["protocol_iptflag"])
					self.dportstr = self.flagCheck(self.traffic.getAttribute("destination-port"),self.iptflags_dict["toport_iptflag"])
					self.tablestr = self.flagCheck(self.traffic.getAttribute("table"),self.iptflags_dict["table_iptflag"])
					self.forwardportstr = self.flagCheck(self.traffic.getAttribute("forward-port"),self.iptflags_dict["destination-port_iptflag"])

					self.iptstr = self.tablestr+ \
						self.chainstr+ \
						self.interfacestr+ \
						self.protocolstr+ \
						self.forwardportstr+ \
						self.jobstr+ \
						self.dportstr

					self.rulesarray.append(self.iptstr)

		return	self.rulesarray

	def getLogging(self):

		self.rulesarray = []

		self.iptflags_dict = self.getIpTablesFlags()

		self.interfacestr = self.iptflags_dict["interface_iptflag"]+' '+self.pinterface+' '

                for self.interface in self.rules_config.getElementsByTagName("interface"):

                        self.logging_level = self.interface.getElementsByTagName("logging")

                        for self.logging in self.logging_level:

                                self.log_level = self.logging.getElementsByTagName("traffic")

                                for self.traffic in self.log_level:

					
					self.chainstr = self.flagCheck(self.traffic.getAttribute("chain"),self.iptflags_dict["chain_iptflag"])
					self.jobstr = self.flagCheck(self.traffic.getAttribute("job"),self.iptflags_dict["job_iptflag"])
					self.protocolstr = self.flagCheck(self.traffic.getAttribute("protocol"),self.iptflags_dict["protocol_iptflag"])
					self.tcpflagsstr = self.flagCheck(self.traffic.getAttribute("tcp-flags"),self.iptflags_dict["tcpflags_iptflag"])
					self.destinationstr = self.flagCheck(self.traffic.getAttribute("destination"),self.iptflags_dict["destination_iptflag"])
					self.dportstr = self.flagCheck(self.traffic.getAttribute("destination-port"),self.iptflags_dict["destination-port_iptflag"])
					self.logprefixstr = self.flagCheck(self.traffic.getAttribute("prefix"),self.iptflags_dict["logprefix_iptflag"])
					self.limitstr = self.flagCheck(self.traffic.getAttribute("limit"),self.iptflags_dict["limit_iptflag"])

					if re.search('tcp', self.protocolstr):
						if self.tcpflagsstr:	
							self.protocolstr = self.protocolstr+' '+self.tcpflagsstr+' '

					if re.search('icmp', self.protocolstr):
						self.dportstr = ''

					self.iptstr = self.chainstr+ \
						self.interfacestr+ \
						self.protocolstr+ \
						self.destinationstr+ \
						self.dportstr+ \
						self.jobstr+ \
						self.logprefixstr+ \
						self.limitstr

					self.rulesarray.append(self.iptstr)

		return	self.rulesarray

	def getDefaultRules(self, headOrFoot):

		self.iptflags_dict = self.getIpTablesFlags()

		if headOrFoot == "head":
			self.rulesarray = []

			for self.interface in self.rules_config.getElementsByTagName("interface"):

                        	self.blockruleshead_level = self.interface.getElementsByTagName("blockruleshead")

                        	for self.blockruleshead in self.blockruleshead_level:
					self.blockchain = self.blockruleshead.getAttribute("blockchain")

                                	self.traffic_level = self.blockruleshead.getElementsByTagName("traffic")

                                	for self.traffic in self.traffic_level:
						self.chainstr = self.flagCheck(self.traffic.getAttribute("chain"),self.iptflags_dict["chain_iptflag"])
						self.jobstr = self.flagCheck(self.traffic.getAttribute("job"),self.iptflags_dict["job_iptflag"])
						self.statestr = self.flagCheck(self.traffic.getAttribute("state"),self.iptflags_dict["state_iptflag"])
						self.newchainstr = self.flagCheck(self.blockchain,self.iptflags_dict["newchain_iptflag"])

						self.rulesarray.append(self.newchainstr)

						self.iptstr = self.chainstr+ \
							self.statestr+ \
							self.jobstr

						self.rulesarray.append(self.iptstr)

			return	self.rulesarray


		if headOrFoot == "foot":
			self.rulesarray = []

			for self.interface in self.rules_config.getElementsByTagName("interface"):

                        	self.blockrulesfoot_level = self.interface.getElementsByTagName("blockrulesfoot")

                        	for self.blockrulesfoot in self.blockrulesfoot_level:

                                	self.traffic_level = self.blockrulesfoot.getElementsByTagName("traffic")

                                	for self.traffic in self.traffic_level:
						self.chainstr = self.flagCheck(self.traffic.getAttribute("chain"),self.iptflags_dict["chain_iptflag"])
						self.jobstr = self.flagCheck(self.traffic.getAttribute("job"),self.iptflags_dict["job_iptflag"])
						self.statestr = self.flagCheck(self.traffic.getAttribute("state"),self.iptflags_dict["state_iptflag"])

						self.iptstr = self.chainstr+ \
							self.statestr+ \
							self.jobstr

						self.rulesarray.append(self.iptstr)
			return	self.rulesarray
					




	def getAllowPing(self):

		self.rulesarray = []

		self.iptflags_dict = self.getIpTablesFlags()

		self.interfacestr = self.iptflags_dict["interface_iptflag"]+' '+self.pinterface+' '

                for self.interface in self.rules_config.getElementsByTagName("interface"):

                        self.allowping_level = self.interface.getElementsByTagName("allowping")

                        for self.allowping in self.allowping_level:

                                self.traffic_level = self.allowping.getElementsByTagName("traffic")

                                for self.traffic in self.traffic_level:
					self.chainstr = self.flagCheck(self.traffic.getAttribute("chain"),self.iptflags_dict["chain_iptflag"])
					self.jobstr = self.flagCheck(self.traffic.getAttribute("job"),self.iptflags_dict["job_iptflag"])
					self.protocolstr = self.flagCheck(self.traffic.getAttribute("protocol"),self.iptflags_dict["protocol_iptflag"])

					self.iptstr = self.chainstr+ \
						self.interfacestr+ \
						self.protocolstr+ \
						self.jobstr

					self.rulesarray.append(self.iptstr)

		return	self.rulesarray

	def getMasquerading(self):

		self.rulesarray = []

		self.iptflags_dict = self.getIpTablesFlags()

		self.interfacestr = self.iptflags_dict["outside_interface_iptflag"]+' '+self.pinterface+' '

                for self.interface in self.rules_config.getElementsByTagName("interface"):

                        self.masquerading_level = self.interface.getElementsByTagName("masquerading")

                        for self.masquerading in self.masquerading_level:

                                self.traffic_level = self.masquerading.getElementsByTagName("traffic")

                                for self.traffic in self.traffic_level:
					self.chainstr = self.flagCheck(self.traffic.getAttribute("chain"),self.iptflags_dict["chain_iptflag"])
					self.jobstr = self.flagCheck(self.traffic.getAttribute("job"),self.iptflags_dict["job_iptflag"])
					self.tablestr = self.flagCheck(self.traffic.getAttribute("table"),self.iptflags_dict["table_iptflag"])

					self.iptstr = self.chainstr+ \
						self.interfacestr+ \
						self.tablestr+ \
						self.jobstr

					self.rulesarray.append(self.iptstr)

		return	self.rulesarray
