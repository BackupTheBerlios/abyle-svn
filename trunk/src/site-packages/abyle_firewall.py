import re
import os
import string
import time
import datetime
import sys
from abyle_output import abyle_output
from abyle_xmlparser import abyleparse
from abyle_config_xmlparser import abyle_config_parse
from xml.sax.handler import ContentHandler
from xml.sax import make_parser


class abyle_firewall:
	def __init__(self, dryrun, iptablesbin, fwconfigpath, rulesfile, syncookie, ipv4forward, ipt_xmlconfig, xmlconfig, antispoofingpath, antispoofingfile, echocmd, logfile, verbose):
		self.naptime = 10 # milliseconds
		self.dryrun = dryrun
		self.iptablesbin = iptablesbin
		self.fwconfigpath = fwconfigpath
		self.rulesfile = rulesfile
	        self.syncookie = syncookie
	        self.ipv4forward = ipv4forward
		self.ipt_xmlconfig = ipt_xmlconfig
		self.xmlconfig = xmlconfig
		self.logfile = logfile
		self.verbose = verbose

		self.echocmd = echocmd
		self.antispoofing_path= antispoofingpath
		self.antispoofing_file= antispoofingfile

        	now = datetime.datetime.now()
	        now =  now.strftime("%Y/%m/%d %H:%M:%S")
		abyle_output("", "", "", "","blue", self.logfile, self.verbose)
		abyle_output("", "", "", "Startup Firewall","blue", self.logfile, self.verbose)
		abyle_output("", "", "", "","blue", self.logfile, self.verbose)
		abyle_output("", "", "", "startup time: "+now,"default", self.logfile, self.verbose)
		abyle_output("", "", "", "","blue", self.logfile, self.verbose)
			
		abyle_output("","","","IPv4 FORWARDING:", "blue", self.logfile, self.verbose)
			
		if not self.ipv4forward == "NO":
			cmdIn, cmdOut, cmdErr = os.popen3(self.echocmd+' 1 > '+self.ipv4forward)
			abyle_output("abyle_firewall", cmdErr.readlines(), cmdOut.readlines(), "ipv4 forwarding activated","default", self.logfile, self.verbose)
                else:
                        cmdIn, cmdOut, cmdErr = os.popen3(self.echocmd+' 0 > '+self.ipv4forward)
                        abyle_output("abyle_firewall", cmdErr.readlines(), cmdOut.readlines(), "ipv4 forwarding deactivated","default", self.logfile, self.verbose)

		abyle_output("","","","SYNCOOKIE:", "blue", self.logfile, self.verbose)
                if not self.syncookie == "NO":
                        cmdIn, cmdOut, cmdErr = os.popen3(self.echocmd+' 1 > '+self.syncookie)
                        abyle_output("abyle_firewall", cmdErr.readlines(), cmdOut.readlines(), "syncookie activated","default", self.logfile, self.verbose)
                else:
                        cmdIn, cmdOut, cmdErr = os.popen3(self.echocmd+' 0 > '+self.syncookie)
                        abyle_output("abyle_firewall", cmdErr.readlines(), cmdOut.readlines(), "syncookie deactivated","default", self.logfile, self.verbose)

                self.default_config = abyleparse(self.fwconfigpath, "default", self.rulesfile, self.ipt_xmlconfig)
                self.defaultrules =  self.default_config.getDefaultRules("head")

                for drule in self.defaultrules:
			abyle_output("abyle_firewall_buildUpFinish_head", "", "", "default-rule: "+drule,"default", self.logfile, self.verbose)
			if not self.dryrun:
               			cmdIn, cmdOut, cmdErr = os.popen3(self.iptablesbin+' '+drule)

	def check_well_formedness(self, file):
       		try:
                	saxparser = make_parser()
                	saxparser.setContentHandler(ContentHandler())
                	saxparser.parse(file)
                	return "ok"
        	except Exception, e:
                	return str(file) + " is NOT well-formed! " + str(e)


	def buildUpFinish(self, verbose):
		self.verbose = verbose

		now = datetime.datetime.now()
		now =  now.strftime("%Y/%m/%d %H:%M:%S")
		self.defaultrules =  self.default_config.getDefaultRules("foot")
		abyle_output("","","","SETTING UP DEFAULT RULES:", "blue", self.logfile, self.verbose)
                for drule in self.defaultrules:
			abyle_output("abyle_firewall_buildUpFinish_foot", "", "", "default-rule: "+drule, "default", self.logfile, self.verbose)
			if not self.dryrun:
                		cmdIn, cmdOut, cmdErr = os.popen3(self.iptablesbin+' '+drule)
		abyle_output("", "", "", "", "blue", self.logfile, self.verbose)
		abyle_output("", "", "", "Startup done - "+now,"blue", self.logfile, self.verbose)
		abyle_output("", "", "", "", "blue", self.logfile, self.verbose)



	def buildUp(self,protectedif,fwconfigpath, verbose):
		self.verbose = verbose

		
		self.protectedif = protectedif
		self.fwconfigpath = fwconfigpath
		abyle_output("abyle_firewall", "", "", "Building a wall of fire in front of "+self.protectedif, "green", self.logfile, self.verbose)
		if not self.verbose:
			self.output = abyle_output("","","","","default", self.logfile, self.verbose)
			self.output.startup("securing "+self.protectedif)
		
		if os.path.exists(self.fwconfigpath+'/'+self.protectedif):

			tempFileStr = self.fwconfigpath+self.protectedif+'/'+self.xmlconfig
			checkWellformed = self.check_well_formedness(tempFileStr)
        		if checkWellformed != "ok":
                		abyle_output("","","",checkWellformed, "red", self.logfile, self.verbose)
                		sys.exit(1)
        		else:
                		abyle_output("","","",self.fwconfigpath+self.protectedif+self.xmlconfig + " is a well-formed xml", "green", self.logfile, self.verbose)

			#parse the config file
		 	self.if_config = abyle_config_parse(self.fwconfigpath, self.protectedif, self.xmlconfig)
        		self.antispoofing = self.if_config.getConfig("antispoofing")
			self.logging = self.if_config.getConfig("logging")
       	 		self.allowping = self.if_config.getConfig("allowping")
       	 		self.masquerading = self.if_config.getConfig("masquerading")
       	 		self.portforwarding = self.if_config.getConfig("portforwarding")
        		self.tproxy = self.if_config.getConfig("transparent_proxy")
        		# end parse the config file

			self.antispoofing = string.upper(self.antispoofing)
			self.logging = string.upper(self.logging)
			self.allowping = string.upper(self.allowping)
			self.masquerading = string.upper(self.masquerading)
			self.portforwarding = string.upper(self.portforwarding)
			self.tproxy = string.upper(self.tproxy)
			
			abyle_output("","","","ANTI SPOOFING:", "blue", self.logfile, self.verbose)
			if not self.verbose:
				self.output.startup(".")
				
			if self.antispoofing == "YES":
                		cmdIn, cmdOut, cmdErr = os.popen3(self.echocmd+' 1 > '+self.antispoofing_path+self.protectedif+'/'+self.antispoofing_file)
                		abyle_output("abyle_firewall_buildUp", cmdErr.readlines(), cmdOut.readlines(), "anti spoofing for "+self.protectedif+" activated","default", self.logfile, self.verbose)
			else:
                		cmdIn, cmdOut, cmdErr = os.popen3(self.echocmd+' 0 > '+self.antispoofing_path+self.protectedif+'/'+self.antispoofing_file)
                		abyle_output("abyle_firewall_buildUp", "", "", "anti spoofing for "+self.protectedif+" deactivated","default", self.logfile, self.verbose)

		
			self.if_config = abyleparse(self.fwconfigpath, self.protectedif, self.rulesfile, self.ipt_xmlconfig)
			self.rules =  self.if_config.getRules()
			abyle_output("","","","RULES:", "blue", self.logfile, self.verbose)
			if not self.verbose:
				self.output.startup(".")
			
			for rule in self.rules:
				time.sleep(self.naptime / 1000.0)
				abyle_output("abyle_firewall_buildUp_rules", "", "", self.protectedif+" "+rule,"default", self.logfile, self.verbose)
				if not self.verbose:
					self.output.startup(".")
				if not self.dryrun:
                			cmdIn, cmdOut, cmdErr = os.popen3(self.iptablesbin+' '+rule)

			abyle_output("","","","PORTFORWARDING:", "blue", self.logfile, self.verbose)
			if not self.verbose:
				self.output.startup(".")
			
			if self.portforwarding == "YES":
				self.portforwarding = self.if_config.getPortforwarding()
				for portfwd in self.portforwarding:
					abyle_output("abyle_firewall_buildUp_portfwd", "", "", self.protectedif+" "+portfwd, "default", self.logfile, self.verbose)
					if not self.dryrun:	
                				cmdIn, cmdOut, cmdErr = os.popen3(self.iptablesbin+' '+portfwd)
			else:
				abyle_output("abyle_firewall_buildUp_portfwd", "", "", self.protectedif+" "+"PORTFORWARDING DISABLED", "default", self.logfile, self.verbose)
			
			abyle_output("","","","TRANSPARENT PROXY:", "blue", self.logfile, self.verbose)
			if not self.verbose:
				self.output.startup(".")
			
			if self.tproxy == "YES":
				self.tproxy = self.if_config.getTproxy()
				for transproxy in self.tproxy:
					abyle_output("abyle_firewall_buildUp_transproxy", "", "", self.protectedif+" "+transproxy, "default", self.logfile, self.verbose)
					if not self.dryrun:
                				cmdIn, cmdOut, cmdErr = os.popen3(self.iptablesbin+' '+transproxy)
			else:
				abyle_output("abyle_firewall_buildUp_tproxy", "", "", self.protectedif+" "+"TRANSPARENT PROXY DISABLED", "default", self.logfile, self.verbose)


			abyle_output("","","","LOGGING:", "blue", self.logfile, self.verbose)
			if not self.verbose:
				self.output.startup(".")
			if self.logging == "YES":
				self.logging = self.if_config.getLogging()
				for log in self.logging:
					abyle_output("abyle_firewall_buildUp_log", "", "", self.protectedif+" "+log, "default", self.logfile, self.verbose)
					if not self.dryrun:
	               				cmdIn, cmdOut, cmdErr = os.popen3(self.iptablesbin+' '+log)
			else:
				abyle_output("abyle_firewall_buildUp_logging", "", "", self.protectedif+" "+"LOGGING DISABLED", "default", self.logfile, self.verbose)

			abyle_output("","","","ALLOW PING:", "blue", self.logfile, self.verbose)
			if not self.verbose:
				self.output.startup(".")
			if self.allowping == "YES":
				self.allowping = self.if_config.getAllowPing()
				for ap in self.allowping:
					abyle_output("abyle_firewall_buildUp_allowping", "", "", self.protectedif+" "+ap, "default", self.logfile, self.verbose)
					if not self.dryrun:
                				cmdIn, cmdOut, cmdErr = os.popen3(self.iptablesbin+' '+ap)
			else:
				abyle_output("abyle_firewall_buildUp_allowping", "", "", self.protectedif+" "+"ALLOWPING DISABLED", "default", self.logfile, self.verbose)

			abyle_output("","","","MASQUERADING:", "blue", self.logfile, self.verbose)
			if not self.verbose:
				self.output.startup(".")
			if self.masquerading == "YES":
				self.masquerading = self.if_config.getMasquerading()
				for mg in self.masquerading:
					abyle_output("abyle_firewall_buildUp_masquerading", "", "", self.protectedif+" "+mg, "default", self.logfile, self.verbose)
					if not self.dryrun:
						cmdIn, cmdOut, cmdErr = os.popen3(self.iptablesbin+' '+mg)
			else:
				abyle_output("abyle_firewall_buildUp_masquerading", "", "", self.protectedif+" "+"MASQUERADING DISABLED", "default", self.logfile, self.verbose)
			if not self.verbose:
				con_size = string.join(os.popen("stty size").readlines())
				arr_con_size = string.split(con_size," ")
				size = string.atoi(arr_con_size[1])-13
				size = size+4
				a = string.join(os.popen("echo -n \033[$(("+str(size)+"))G && echo -n    [DONE]  "))
				self.output.startup(a, "blue", "yes")

				#self.output.startup("[DONE]", "blue")
		else:
			abyle_output("abyle_firewall", "", "", "ERROR: No directory found for interface "+self.protectedif+" in "+self.fwconfigpath, "red", self.logfile, self.verbose)
