# Copyright (C) 2005  Stefan Nistelberger (scuq@gmx.net)
# abyle fw script - python iptables config script
# abyle_firewall.py
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
# http://www.gnu.org/licenses/gpl.txt

import re
import os
import string
import time
from abyle_output import abyle_output
from abyle_xmlparser import abyleparse
from abyle_config_xmlparser import abyle_config_parse


class abyle_firewall:
	def __init__(self, dryrun, iptablesbin, fwconfigpath, rulesfile, syncookie, ipv4forward, ipt_xmlconfig, xmlconfig, antispoofingpath, antispoofingfile, echocmd):
		self.naptime = 500 # milliseconds
		self.dryrun = dryrun
		self.iptablesbin = iptablesbin
		self.fwconfigpath = fwconfigpath
		self.rulesfile = rulesfile
	        self.syncookie = syncookie
	        self.ipv4forward = ipv4forward
		self.ipt_xmlconfig = ipt_xmlconfig
		self.xmlconfig = xmlconfig

		self.echocmd = echocmd
		self.antispoofing_path= antispoofingpath
		self.antispoofing_file= antispoofingfile

		abyle_output("","","","IPv4 FORWARDING:", "blue")
                if not self.ipv4forward == "NO":
                        cmdIn, cmdOut, cmdErr = os.popen3(self.echocmd+' 1 > '+self.ipv4forward)
                        abyle_output("abyle_firewall", cmdErr.readlines(), cmdOut.readlines(), "ipv4 forwarding activated")
                else:
                        cmdIn, cmdOut, cmdErr = os.popen3(self.echocmd+' 0 > '+self.ipv4forward)
                        abyle_output("abyle_firewall", cmdErr.readlines(), cmdOut.readlines(), "ipv4 forwarding deactivated")

		abyle_output("","","","SYNCOOKIE:", "blue")
                if not self.syncookie == "NO":
                        cmdIn, cmdOut, cmdErr = os.popen3(self.echocmd+' 1 > '+self.syncookie)
                        abyle_output("abyle_firewall", cmdErr.readlines(), cmdOut.readlines(), "syncookie activated")
                else:
                        cmdIn, cmdOut, cmdErr = os.popen3(self.echocmd+' 0 > '+self.syncookie)
                        abyle_output("abyle_firewall", cmdErr.readlines(), cmdOut.readlines(), "syncookie deactivated")

                self.default_config = abyleparse(self.fwconfigpath, "default", self.rulesfile, self.ipt_xmlconfig)
                self.defaultrules =  self.default_config.getDefaultRules("head")

                for drule in self.defaultrules:
			abyle_output("abyle_firewall_buildUpFinish_head", "", "", "default-rule: "+drule)
               		cmdIn, cmdOut, cmdErr = os.popen3(self.iptablesbin+' '+drule)


	def buildUpFinish(self):

                self.defaultrules =  self.default_config.getDefaultRules("foot")

		abyle_output("","","","SETTING UP DEFAULT RULES:", "blue")
                for drule in self.defaultrules:
			abyle_output("abyle_firewall_buildUpFinish_foot", "", "", "default-rule: "+drule)
			if not self.dryrun:
                		cmdIn, cmdOut, cmdErr = os.popen3(self.iptablesbin+' '+drule)
		



	def buildUp(self,protectedif,fwconfigpath):
		self.protectedif = protectedif
		self.fwconfigpath = fwconfigpath
		abyle_output("abyle_firewall", "", "", "Building a wall of fire in front of "+self.protectedif, "green")
		if os.path.exists(self.fwconfigpath+'/'+self.protectedif):
			#parse the config file
		 	self.if_config = abyle_config_parse(self.fwconfigpath, self.protectedif, self.xmlconfig)
        		self.antispoofing = self.if_config.getConfig("antispoofing")
			self.logging = self.if_config.getConfig("logging")
       	 		self.allowping = self.if_config.getConfig("allowping")
       	 		self.masquerading = self.if_config.getConfig("masquerading")
       	 		self.portforwarding = self.if_config.getConfig("portforwarding")
        		self.tproxy = self.if_config.getConfig("transparent_proxy")
        		# end parse the config file

			self.antispoofing = string.upper(self.antispoofing)
			self.logging = string.upper(self.logging)
			self.allowping = string.upper(self.allowping)
			self.masquerading = string.upper(self.masquerading)
			self.portforwarding = string.upper(self.portforwarding)
			self.tproxy = string.upper(self.tproxy)

			abyle_output("","","","ANTI SPOOFING:", "blue")
			if self.antispoofing == "YES":
                		cmdIn, cmdOut, cmdErr = os.popen3(self.echocmd+' 1 > '+self.antispoofing_path+self.protectedif+'/'+self.antispoofing_file)
                		abyle_output("abyle_firewall_buildUp", cmdErr.readlines(), cmdOut.readlines(), "anti spoofing for "+self.protectedif+" activated")
			else:
                		cmdIn, cmdOut, cmdErr = os.popen3(self.echocmd+' 0 > '+self.antispoofing_path+self.protectedif+'/'+self.antispoofing_file)
                		abyle_output("abyle_firewall_buildUp", "", "", "anti spoofing for "+self.protectedif+" deactivated")


		
			self.if_config = abyleparse(self.fwconfigpath, self.protectedif, self.rulesfile, self.ipt_xmlconfig)
			self.rules =  self.if_config.getRules()
			abyle_output("","","","RULES:", "blue")
			for rule in self.rules:
				time.sleep(self.naptime / 1000.0)
				abyle_output("abyle_firewall_buildUp_rules", "", "", self.protectedif+" "+rule)
				if not self.dryrun:
                			cmdIn, cmdOut, cmdErr = os.popen3(self.iptablesbin+' '+rule)

			abyle_output("","","","PORTFORWARDING:", "blue")
			if self.portforwarding == "YES":
				self.portforwarding = self.if_config.getPortforwarding()
				for portfwd in self.portforwarding:
					abyle_output("abyle_firewall_buildUp_portfwd", "", "", self.protectedif+" "+portfwd)
					if not self.dryrun:	
                				cmdIn, cmdOut, cmdErr = os.popen3(self.iptablesbin+' '+portfwd)
			else:
				abyle_output("abyle_firewall_buildUp_portfwd", "", "", self.protectedif+" "+"PORTFORWARDING DISABLED")
			
			abyle_output("","","","TRANSPARENT PROXY:", "blue")
			if self.tproxy == "YES":
				self.tproxy = self.if_config.getTproxy()
				for transproxy in self.tproxy:
					abyle_output("abyle_firewall_buildUp_transproxy", "", "", self.protectedif+" "+transproxy)
					if not self.dryrun:
                				cmdIn, cmdOut, cmdErr = os.popen3(self.iptablesbin+' '+transproxy)
			else:
				abyle_output("abyle_firewall_buildUp_tproxy", "", "", self.protectedif+" "+"TRANSPARENT PROXY DISABLED")


			abyle_output("","","","LOGGING:", "blue")
			if self.logging == "YES":
				self.logging = self.if_config.getLogging()
				for log in self.logging:
					abyle_output("abyle_firewall_buildUp_log", "", "", self.protectedif+" "+log)
					if not self.dryrun:
	               				cmdIn, cmdOut, cmdErr = os.popen3(self.iptablesbin+' '+log)
			else:
				abyle_output("abyle_firewall_buildUp_logging", "", "", self.protectedif+" "+"LOGGING DISABLED")

			abyle_output("","","","ALLOW PING:", "blue")
			if self.allowping == "YES":
				self.allowping = self.if_config.getAllowPing()
				for ap in self.allowping:
					abyle_output("abyle_firewall_buildUp_allowping", "", "", self.protectedif+" "+ap)
					if not self.dryrun:
                				cmdIn, cmdOut, cmdErr = os.popen3(self.iptablesbin+' '+ap)
			else:
				abyle_output("abyle_firewall_buildUp_allowping", "", "", self.protectedif+" "+"ALLOWPING DISABLED")

			abyle_output("","","","MASQUERADING:", "blue")
			if self.masquerading == "YES":
				self.masquerading = self.if_config.getMasquerading()
				for mg in self.masquerading:
					abyle_output("abyle_firewall_buildUp_masquerading", "", "", self.protectedif+" "+mg)
					if not self.dryrun:
						cmdIn, cmdOut, cmdErr = os.popen3(self.iptablesbin+' '+mg)
			else:
				abyle_output("abyle_firewall_buildUp_masquerading", "", "", self.protectedif+" "+"MASQUERADING DISABLED")
		else:
			abyle_output("abyle_firewall", "", "", "ERROR: No directory found for interface "+self.protectedif+" in "+self.fwconfigpath, "red")
